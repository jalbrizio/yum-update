***REMOVED***!/bin/sh

***REMOVED*** Copyright 2001-2013 VMware, Inc.  All rights reserved.
***REMOVED*** VMware Confidential
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***


***REMOVED***
***REMOVED*** network (Linux)
***REMOVED***
***REMOVED*** Using a combination of a system networking script, ifconfig, and ifup,
***REMOVED*** attempt to release and renew DHCP leases upon receipt of suspend and resume
***REMOVED*** events, respectively.
***REMOVED***


echo `date` ": Executing '$0'"
echo

. `dirname "$0"`/../../statechange.subr


***REMOVED***
***REMOVED*** find_networking_script --
***REMOVED***
***REMOVED***    Searches common Linux distro init/rc paths to find a singular network
***REMOVED***    services script.
***REMOVED***
***REMOVED*** Result:
***REMOVED***    Returns a valid networking script path on success or "error" on failure.
***REMOVED***
***REMOVED*** Side effects:
***REMOVED***    None.
***REMOVED***

find_networking_script() {
    local script="error"
    for dir in "/etc/init.d" "/sbin/init.d" "/etc" "/etc/rc.d" ; do
        if [ -d "$dir/rc0.d" ] &&
	    [ -d "$dir/rc1.d" ] &&
	    [ -d "$dir/rc2.d" ] &&
	    [ -d "$dir/rc3.d" ] &&
	    [ -d "$dir/rc4.d" ] &&
	    [ -d "$dir/rc5.d" ] &&
	    [ -d "$dir/rc6.d" ]; then

	    ***REMOVED*** Now find the appropriate networking script.
	    if [ -d "$dir/init.d" ]; then
		if [ -x "$dir/init.d/network" ]; then
		    script="$dir/init.d/network"
		elif [ -x "$dir/init.d/networking" ]; then
		    script="$dir/init.d/networking"
		fi
	    else
		if [ -x "$dir/network" ]; then
		    script="$dir/network"
		elif [ -x "$dir/networking" ]; then
		    script="$dir/networking"
		fi
	    fi
        fi
    done

    echo "$script"
}


***REMOVED***
***REMOVED*** save_active_NIC_list --
***REMOVED***
***REMOVED***    Records a list of every active NIC to /var/run/vmware-active-nics.
***REMOVED***
***REMOVED***    XXX What's the story on aliases?  Should they still be included, or will
***REMOVED***    they be recreated automatically upon resume?
***REMOVED***
***REMOVED*** Results:
***REMOVED***    $activeList has, one per line, a list of all active NICs.
***REMOVED***
***REMOVED*** Side effects:
***REMOVED***    None.
***REMOVED***

save_active_NIC_list() {
   >$activeList

   for nic in `ifconfig | awk '/^eth/ { print $1 }'`; do
      ifconfig $nic | egrep -q '\bUP\b' && echo $nic >> $activeList
      exitCode=`expr $exitCode \| $?`
   done
}


***REMOVED***
***REMOVED*** rescue_NIC --
***REMOVED***
***REMOVED***    For each NIC recorded in $activeList that is not currently "up", run
***REMOVED***    "ifup $nic".
***REMOVED***
***REMOVED*** Results:
***REMOVED***    All downed NICs should be active.
***REMOVED***

rescue_NIC() {
   if [ -f "$activeList" ]; then
      while read nic; do
         if ifconfig $nic | egrep -q '\bUP\b'; then
            echo `date` "[rescue_nic] $nic is already active."
         else
            echo `date` "[rescue_nic] activating $nic ..."

            ifup $nic
            exitCode=`expr $exitCode \| $?`
         fi
      done < $activeList

      rm -f $activeList
   fi
}


***REMOVED***
***REMOVED*** TranquilizeNetworkManager --
***REMOVED***
***REMOVED***    Put the NetworkManager daemon to sleep (maybe).
***REMOVED***
***REMOVED***    See http://projects.gnome.org/NetworkManager/developers/spec.html .
***REMOVED***
***REMOVED*** Results:
***REMOVED***    Sleep(true) request is sent to the NetworkManager D-Bus interface.
***REMOVED***
***REMOVED*** Side effects:
***REMOVED***    None.
***REMOVED***

TranquilizeNetworkManager() {
   ***REMOVED*** `which' may be a bit noisy, so we'll shush it.
   dbusSend=`which dbus-send 2>/dev/null`
   if [ $? -eq 0 ]; then
      ***REMOVED*** NetworkManager 0.6
      $dbusSend --system --dest=org.freedesktop.NetworkManager          \
         /org/freedesktop/NetworkManager                                \
         org.freedesktop.NetworkManager.sleep
      ***REMOVED*** NetworkManager 0.7.0
      $dbusSend --system --dest=org.freedesktop.NetworkManager          \
         /org/freedesktop/NetworkManager                                \
         org.freedesktop.NetworkManager.Sleep boolean:true
   fi
}


***REMOVED***
***REMOVED*** WakeNetworkManager --
***REMOVED***
***REMOVED***    Wake the NetworkManager daemon (maybe).
***REMOVED***
***REMOVED***    See http://projects.gnome.org/NetworkManager/developers/spec.html .
***REMOVED***
***REMOVED*** Results:
***REMOVED***    Sleep(false)request is sent to the NetworkManager D-Bus interface.
***REMOVED***
***REMOVED*** Side effects:
***REMOVED***    None.
***REMOVED***

WakeNetworkManager() {
   ***REMOVED*** `which' may be a bit noisy, so we'll shush it.
   dbusSend=`which dbus-send 2>/dev/null`
   if [ $? -eq 0 ]; then
      ***REMOVED*** NetworkManager 0.6
      $dbusSend --system --dest=org.freedesktop.NetworkManager          \
         /org/freedesktop/NetworkManager                                \
         org.freedesktop.NetworkManager.wake
      ***REMOVED*** NetworkManager 0.7.0
      $dbusSend --system --dest=org.freedesktop.NetworkManager          \
         /org/freedesktop/NetworkManager                                \
         org.freedesktop.NetworkManager.Sleep boolean:false
   fi
}


***REMOVED***
***REMOVED*** main --
***REMOVED***
***REMOVED***    Main entry point.  Perform some sanity checking, then map state change
***REMOVED***    events to relevant networking operations.
***REMOVED***
***REMOVED*** Results:
***REMOVED***    See comment at top of file.
***REMOVED***

main() {
   exitCode=0
   activeList=/var/run/vmware-active-nics

   networkScript=`find_networking_script`
   [ "$networkScript" != "error" ] || Panic "Cannot find system networking script."

   ***REMOVED*** XXX Are these really necessary?  If so, we should have seen customer
   ***REMOVED*** complaints by now.
   which ifup >/dev/null 2>&1      || Panic "ifup not in search path."
   which ifconfig >/dev/null 2>&1  || Panic "ifconfig not in search path."

   case "$1" in
      poweron-vm)
         rm -f $activeList
         ;;
      suspend-vm)
         save_active_NIC_list
         "$networkScript" stop
         TranquilizeNetworkManager
         ;;
      resume-vm)
         ***REMOVED*** According to hfu, "/etc/init.d/networking restart" on Debian 5.0
         ***REMOVED*** may bring down ethernet interfaces tagged as "allow-hotplug" without
         ***REMOVED*** bringing them back up.
         ***REMOVED***
         ***REMOVED*** This is especially a problem when reverting to a live, running
         ***REMOVED*** VM snapshot where an active NIC list hadn't yet been generated,
         ***REMOVED*** resulting in sudden loss of an otherwise operational NIC.
         ***REMOVED***
         ***REMOVED*** So, if the active list doesn't exist, assume we're coming back to
         ***REMOVED*** a live snapshot and capture the current active list now for
         ***REMOVED*** rescue later.
         if [ ! -s $activeList ]; then
            save_active_NIC_list
         fi
         WakeNetworkManager
         ***REMOVED*** XXX Do we really want restart or is start sufficient?  Like, would
         ***REMOVED*** using start avoid the problem mentioned above?
         ***REMOVED*** -- PR 816791, 876145
         "$networkScript" start
         rescue_NIC
         ;;
      *) ;;
   esac

   return $exitCode
}

main "$@"
